import os
from typing import Dict, List
import requests
from bs4 import BeautifulSoup
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

def get_user_url() -> str:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è URL —Å–∞–π—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("\n" + "="*40)
    print("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π")
    print("="*40)
    while True:
        url = input("\n–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com): ").strip()
        if url.startswith(('http://', 'https://')):
            return url
        print("–û—à–∏–±–∫–∞: URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")

def generate_future_prompts_from_url(url: str) -> Dict[str, list]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 5-6 —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ URL.
    """
    try:
        # 1. –°–∫–∞—á–∏–≤–∞–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        try:
            response = requests.get(url, headers=headers, timeout=15)
            response.raise_for_status()
        except requests.RequestException as e:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {str(e)}")

        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for element in soup(["script", "style", "nav", "footer", "header", "iframe", "noscript"]):
            element.decompose()
            
        text = soup.get_text(separator='\n', strip=True)
        if not text:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = f"""
        –¢—ã —Å–æ–∑–¥–∞—ë—à—å —Ü–µ–ø–æ—á–∫—É –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤. 
        –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ —Å —Å–∞–π—Ç–∞ –ø—Ä–∏–¥—É–º–∞–π 5-6 —Ä–∞–∑–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤.
        –¢–µ–∫—Å—Ç —Å–∞–π—Ç–∞ (—Ñ—Ä–∞–≥–º–µ–Ω—Ç):
        {text[:3000]}...
        """
        
        # 4. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã
        generated_prompts = query_with_custom_system_prompt(
            prompt=system_prompt,
            content="–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5-6 —Ä–∞–∑–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ."
        )
        
        if not generated_prompts:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã")
        
        # 5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        prompts_list = [p.strip() for p in generated_prompts.split('\n') if p.strip()]
        if not prompts_list:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞")
            
        return {"prompts": prompts_list[:6]}

    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {str(e)}")

def query_with_custom_system_prompt(prompt: str, content: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    """
    try:
        client = OpenAI(
            api_key=os.getenv("OPENAI_API_KEY"),
            base_url=os.getenv("OPENAI_BASE_URL", "https://api.openai.com/v1"),
        )
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",  #gpt-3.5-turbo-1106
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": content}
            ],
            temperature=0.7,
            max_tokens=2000,
        )
        
        if not response.choices or not response.choices[0].message.content:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            
        return response.choices[0].message.content.strip()
    
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ API: {str(e)}")

def generate_final_ad_post(all_results: List[str]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π.
    """
    if not all_results:
        raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞")
        
    combined_content = "\n\n".join(f"–ê–Ω–∞–ª–∏–∑ {i+1}:\n{r}" for i, r in enumerate(all_results))
    
    system_prompt = """
    –¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –°–æ—Å—Ç–∞–≤—å –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞:
    - –ò—Å–ø–æ–ª—å–∑—É–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
    - –î–æ–±–∞–≤—å 3-5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏
    - –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —Å –∞–±–∑–∞—Ü–∞–º–∏
    - –í–∫–ª—é—á–∏ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
    - –î–ª–∏–Ω–∞: 2-3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞
    """
    
    try:
        return query_with_custom_system_prompt(
            prompt=system_prompt,
            content=f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞:\n\n{combined_content}\n\n---\n–°–æ–∑–¥–∞–π –ø–æ—Å—Ç:"
        )
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}")

def main():
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º URL –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        url = get_user_url()
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã
        print("\n[‚è≥] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∞–π—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç—ã...")
        prompts = generate_future_prompts_from_url(url)
        
        print("\n[‚úÖ] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        for i, p in enumerate(prompts["prompts"], 1):
            print(f"\n{i}. {p}")
        
        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n[üîç] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–º–ø—Ç—É:")
        test_results = []
        
        # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        # tasks = [
        #     ("–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏", "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫. –û–ø—Ä–µ–¥–µ–ª–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é —Å–∞–π—Ç–∞ –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö."),
        #     ("–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫. –í—ã–¥–µ–ª–∏ 3-5 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞."),
        #     ("–°—Ç–∏–ª—å –ø–æ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "–û–ø—Ä–µ–¥–µ–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π —Å—Ç–∏–ª—å –ø–æ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ."),
        #     ("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", "–í—ã–¥–µ–ª–∏ 2-3 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞."),
        #     ("–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "–û–ø—Ä–µ–¥–µ–ª–∏ –æ–±—â—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ñ–æ—Ä–º–∞–ª—å–Ω–∞—è, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ —Ç.–¥.)."),
        #     ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é", "–î–∞–π 1-2 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
        # ]
        tasks = [
            ("1."),
            ("2."),
            ("3."),
            ("4."),
            ("5."),
            ("6.")
        ]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã (–Ω–æ –Ω–µ –±–æ–ª–µ–µ 6)
        for prompt, task_description in zip(prompts["prompts"][:6], tasks):
            print("\n" + "-"*50)
            print(f"\n–ü—Ä–æ–º–ø—Ç: {prompt}")
            
            result = query_with_custom_system_prompt(
                task_description[1],
                f"–°–∞–π—Ç: {url}\n–ö–æ–Ω—Ç–µ–Ω—Ç: {prompt}"
            )
            
            print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            test_results.append(f"{task_description[0]}: {result}")
        
        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç
        print("\n" + "="*50)
        print("[‚è≥] –°–æ–∑–¥–∞—é –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞...")
        post = generate_final_ad_post(test_results)
        
        print("\n[‚úÖ] –ì–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
        print("\n" + "="*50)
        print(post)
        print("="*50)
        
    except Exception as e:
        print(f"\n[‚ùå] –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main()